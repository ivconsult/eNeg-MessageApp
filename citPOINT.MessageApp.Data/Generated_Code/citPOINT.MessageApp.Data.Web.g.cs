//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.MessageApp.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The domain context corresponding to the 'MessageAppService' domain service.
    /// </summary>
    public sealed partial class MessageAppContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAppContext"/> class.
        /// </summary>
        public MessageAppContext() : 
                this(new WebDomainClient<IMessageAppServiceContract>(new Uri("citPOINT-MessageApp-Data-Web-MessageAppService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAppContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MessageAppService service URI.</param>
        public MessageAppContext(Uri serviceUri) : 
                this(new WebDomainClient<IMessageAppServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageAppContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public MessageAppContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MessageType"/> entities that have been loaded into this <see cref="MessageAppContext"/> instance.
        /// </summary>
        public EntitySet<MessageType> MessageTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MessageType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationPhase"/> entities that have been loaded into this <see cref="MessageAppContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationPhase> NegotiationPhases
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationPhase>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegPhaseMessage"/> entities that have been loaded into this <see cref="MessageAppContext"/> instance.
        /// </summary>
        public EntitySet<NegPhaseMessage> NegPhaseMessages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegPhaseMessage>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageType"/> entities using the 'GetMessageTypesForUserID' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageType"/> entities.</returns>
        public EntityQuery<MessageType> GetMessageTypesForUserIDQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetMessageTypesForUserIDQuery", parameters);
            return base.CreateQuery<MessageType>("GetMessageTypesForUserID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationPhase"/> entities using the 'GetNegotiationPhasesForUserID' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationPhase"/> entities.</returns>
        public EntityQuery<NegotiationPhase> GetNegotiationPhasesForUserIDQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetNegotiationPhasesForUserIDQuery", parameters);
            return base.CreateQuery<NegotiationPhase>("GetNegotiationPhasesForUserID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegPhaseMessage"/> entities using the 'GetNegPhaseMessagesForUserID' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegPhaseMessage"/> entities.</returns>
        public EntityQuery<NegPhaseMessage> GetNegPhaseMessagesForUserIDQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetNegPhaseMessagesForUserIDQuery", parameters);
            return base.CreateQuery<NegPhaseMessage>("GetNegPhaseMessagesForUserID", parameters, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MessageAppContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MessageAppService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IMessageAppServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageTypesForUserID' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MessageAppService/GetMessageTypesForUserIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MessageAppService/GetMessageTypesForUserID", ReplyAction="http://tempuri.org/MessageAppService/GetMessageTypesForUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageTypesForUserID(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageTypesForUserID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageTypesForUserID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageTypesForUserID' operation.</returns>
            QueryResult<MessageType> EndGetMessageTypesForUserID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationPhasesForUserID' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MessageAppService/GetNegotiationPhasesForUserIDDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MessageAppService/GetNegotiationPhasesForUserID", ReplyAction="http://tempuri.org/MessageAppService/GetNegotiationPhasesForUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationPhasesForUserID(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationPhasesForUserID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationPhasesForUserID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationPhasesForUserID' operation.</returns>
            QueryResult<NegotiationPhase> EndGetNegotiationPhasesForUserID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegPhaseMessagesForUserID' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MessageAppService/GetNegPhaseMessagesForUserIDDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MessageAppService/GetNegPhaseMessagesForUserID", ReplyAction="http://tempuri.org/MessageAppService/GetNegPhaseMessagesForUserIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegPhaseMessagesForUserID(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegPhaseMessagesForUserID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegPhaseMessagesForUserID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegPhaseMessagesForUserID' operation.</returns>
            QueryResult<NegPhaseMessage> EndGetNegPhaseMessagesForUserID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MessageAppService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MessageAppService/SubmitChanges", ReplyAction="http://tempuri.org/MessageAppService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MessageAppContextEntityContainer : EntityContainer
        {
            
            public MessageAppContextEntityContainer()
            {
                this.CreateEntitySet<MessageType>(EntitySetOperations.All);
                this.CreateEntitySet<NegotiationPhase>(EntitySetOperations.All);
                this.CreateEntitySet<NegPhaseMessage>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'MessageType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.MessageApp.Data.Web")]
    public sealed partial class MessageType : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _messageTypeID;
        
        private string _messageTypeName;
        
        private EntityCollection<NegPhaseMessage> _negPhaseMessages;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnMessageTypeIDChanging(Guid value);
        partial void OnMessageTypeIDChanged();
        partial void OnMessageTypeNameChanging(string value);
        partial void OnMessageTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageType"/> class.
        /// </summary>
        public MessageType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MessageTypeID
        {
            get
            {
                return this._messageTypeID;
            }
            set
            {
                if ((this._messageTypeID != value))
                {
                    this.OnMessageTypeIDChanging(value);
                    this.ValidateProperty("MessageTypeID", value);
                    this._messageTypeID = value;
                    this.RaisePropertyChanged("MessageTypeID");
                    this.OnMessageTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageTypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string MessageTypeName
        {
            get
            {
                return this._messageTypeName;
            }
            set
            {
                if ((this._messageTypeName != value))
                {
                    this.OnMessageTypeNameChanging(value);
                    this.RaiseDataMemberChanging("MessageTypeName");
                    this.ValidateProperty("MessageTypeName", value);
                    this._messageTypeName = value;
                    this.RaiseDataMemberChanged("MessageTypeName");
                    this.OnMessageTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegPhaseMessage"/> entities.
        /// </summary>
        [Association("MessageType_NegPhaseMessage", "MessageTypeID", "MessageTypeID")]
        [XmlIgnore()]
        public EntityCollection<NegPhaseMessage> NegPhaseMessages
        {
            get
            {
                if ((this._negPhaseMessages == null))
                {
                    this._negPhaseMessages = new EntityCollection<NegPhaseMessage>(this, "NegPhaseMessages", this.FilterNegPhaseMessages, this.AttachNegPhaseMessages, this.DetachNegPhaseMessages);
                }
                return this._negPhaseMessages;
            }
        }
        
        private void AttachNegPhaseMessages(NegPhaseMessage entity)
        {
            entity.MessageType = this;
        }
        
        private void DetachNegPhaseMessages(NegPhaseMessage entity)
        {
            entity.MessageType = null;
        }
        
        private bool FilterNegPhaseMessages(NegPhaseMessage entity)
        {
            return (entity.MessageTypeID == this.MessageTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageTypeID;
        }
    }
    
    /// <summary>
    /// The 'NegotiationPhase' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.MessageApp.Data.Web")]
    public sealed partial class NegotiationPhase : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _negotiationPhaseID;
        
        private string _negotiationPhaseName;
        
        private EntityCollection<NegPhaseMessage> _negPhaseMessages;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegotiationPhaseIDChanging(Guid value);
        partial void OnNegotiationPhaseIDChanged();
        partial void OnNegotiationPhaseNameChanging(string value);
        partial void OnNegotiationPhaseNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationPhase"/> class.
        /// </summary>
        public NegotiationPhase()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationPhaseID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationPhaseID
        {
            get
            {
                return this._negotiationPhaseID;
            }
            set
            {
                if ((this._negotiationPhaseID != value))
                {
                    this.OnNegotiationPhaseIDChanging(value);
                    this.ValidateProperty("NegotiationPhaseID", value);
                    this._negotiationPhaseID = value;
                    this.RaisePropertyChanged("NegotiationPhaseID");
                    this.OnNegotiationPhaseIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationPhaseName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string NegotiationPhaseName
        {
            get
            {
                return this._negotiationPhaseName;
            }
            set
            {
                if ((this._negotiationPhaseName != value))
                {
                    this.OnNegotiationPhaseNameChanging(value);
                    this.RaiseDataMemberChanging("NegotiationPhaseName");
                    this.ValidateProperty("NegotiationPhaseName", value);
                    this._negotiationPhaseName = value;
                    this.RaiseDataMemberChanged("NegotiationPhaseName");
                    this.OnNegotiationPhaseNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegPhaseMessage"/> entities.
        /// </summary>
        [Association("NegotiationPhase_NegPhaseMessage", "NegotiationPhaseID", "NegotiationPhaseID")]
        [XmlIgnore()]
        public EntityCollection<NegPhaseMessage> NegPhaseMessages
        {
            get
            {
                if ((this._negPhaseMessages == null))
                {
                    this._negPhaseMessages = new EntityCollection<NegPhaseMessage>(this, "NegPhaseMessages", this.FilterNegPhaseMessages, this.AttachNegPhaseMessages, this.DetachNegPhaseMessages);
                }
                return this._negPhaseMessages;
            }
        }
        
        private void AttachNegPhaseMessages(NegPhaseMessage entity)
        {
            entity.NegotiationPhase = this;
        }
        
        private void DetachNegPhaseMessages(NegPhaseMessage entity)
        {
            entity.NegotiationPhase = null;
        }
        
        private bool FilterNegPhaseMessages(NegPhaseMessage entity)
        {
            return (entity.NegotiationPhaseID == this.NegotiationPhaseID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationPhaseID;
        }
    }
    
    /// <summary>
    /// The 'NegPhaseMessage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.MessageApp.Data.Web")]
    public sealed partial class NegPhaseMessage : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private string _messageContent;
        
        private EntityRef<MessageType> _messageType;
        
        private Nullable<Guid> _messageTypeID;
        
        private EntityRef<NegotiationPhase> _negotiationPhase;
        
        private Nullable<Guid> _negotiationPhaseID;
        
        private Guid _negPhaseMessagesID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnMessageContentChanging(string value);
        partial void OnMessageContentChanged();
        partial void OnMessageTypeIDChanging(Nullable<Guid> value);
        partial void OnMessageTypeIDChanged();
        partial void OnNegotiationPhaseIDChanging(Nullable<Guid> value);
        partial void OnNegotiationPhaseIDChanged();
        partial void OnNegPhaseMessagesIDChanging(Guid value);
        partial void OnNegPhaseMessagesIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegPhaseMessage"/> class.
        /// </summary>
        public NegPhaseMessage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageContent' value.
        /// </summary>
        [DataMember()]
        public string MessageContent
        {
            get
            {
                return this._messageContent;
            }
            set
            {
                if ((this._messageContent != value))
                {
                    this.OnMessageContentChanging(value);
                    this.RaiseDataMemberChanging("MessageContent");
                    this.ValidateProperty("MessageContent", value);
                    this._messageContent = value;
                    this.RaiseDataMemberChanged("MessageContent");
                    this.OnMessageContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MessageType"/> entity.
        /// </summary>
        [Association("MessageType_NegPhaseMessage", "MessageTypeID", "MessageTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public MessageType MessageType
        {
            get
            {
                if ((this._messageType == null))
                {
                    this._messageType = new EntityRef<MessageType>(this, "MessageType", this.FilterMessageType);
                }
                return this._messageType.Entity;
            }
            set
            {
                MessageType previous = this.MessageType;
                if ((previous != value))
                {
                    this.ValidateProperty("MessageType", value);
                    if ((previous != null))
                    {
                        this._messageType.Entity = null;
                        previous.NegPhaseMessages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MessageTypeID = value.MessageTypeID;
                    }
                    else
                    {
                        this.MessageTypeID = default(Nullable<Guid>);
                    }
                    this._messageType.Entity = value;
                    if ((value != null))
                    {
                        value.NegPhaseMessages.Add(this);
                    }
                    this.RaisePropertyChanged("MessageType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> MessageTypeID
        {
            get
            {
                return this._messageTypeID;
            }
            set
            {
                if ((this._messageTypeID != value))
                {
                    this.OnMessageTypeIDChanging(value);
                    this.RaiseDataMemberChanging("MessageTypeID");
                    this.ValidateProperty("MessageTypeID", value);
                    this._messageTypeID = value;
                    this.RaiseDataMemberChanged("MessageTypeID");
                    this.OnMessageTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NegotiationPhase"/> entity.
        /// </summary>
        [Association("NegotiationPhase_NegPhaseMessage", "NegotiationPhaseID", "NegotiationPhaseID", IsForeignKey=true)]
        [XmlIgnore()]
        public NegotiationPhase NegotiationPhase
        {
            get
            {
                if ((this._negotiationPhase == null))
                {
                    this._negotiationPhase = new EntityRef<NegotiationPhase>(this, "NegotiationPhase", this.FilterNegotiationPhase);
                }
                return this._negotiationPhase.Entity;
            }
            set
            {
                NegotiationPhase previous = this.NegotiationPhase;
                if ((previous != value))
                {
                    this.ValidateProperty("NegotiationPhase", value);
                    if ((previous != null))
                    {
                        this._negotiationPhase.Entity = null;
                        previous.NegPhaseMessages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegotiationPhaseID = value.NegotiationPhaseID;
                    }
                    else
                    {
                        this.NegotiationPhaseID = default(Nullable<Guid>);
                    }
                    this._negotiationPhase.Entity = value;
                    if ((value != null))
                    {
                        value.NegPhaseMessages.Add(this);
                    }
                    this.RaisePropertyChanged("NegotiationPhase");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationPhaseID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> NegotiationPhaseID
        {
            get
            {
                return this._negotiationPhaseID;
            }
            set
            {
                if ((this._negotiationPhaseID != value))
                {
                    this.OnNegotiationPhaseIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationPhaseID");
                    this.ValidateProperty("NegotiationPhaseID", value);
                    this._negotiationPhaseID = value;
                    this.RaiseDataMemberChanged("NegotiationPhaseID");
                    this.OnNegotiationPhaseIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegPhaseMessagesID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegPhaseMessagesID
        {
            get
            {
                return this._negPhaseMessagesID;
            }
            set
            {
                if ((this._negPhaseMessagesID != value))
                {
                    this.OnNegPhaseMessagesIDChanging(value);
                    this.ValidateProperty("NegPhaseMessagesID", value);
                    this._negPhaseMessagesID = value;
                    this.RaisePropertyChanged("NegPhaseMessagesID");
                    this.OnNegPhaseMessagesIDChanged();
                }
            }
        }
        
        private bool FilterMessageType(MessageType entity)
        {
            return (entity.MessageTypeID == this.MessageTypeID);
        }
        
        private bool FilterNegotiationPhase(NegotiationPhase entity)
        {
            return (entity.NegotiationPhaseID == this.NegotiationPhaseID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negPhaseMessagesID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SessionService' domain service.
    /// </summary>
    public sealed partial class SessionContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class.
        /// </summary>
        public SessionContext() : 
                this(new WebDomainClient<ISessionServiceContract>(new Uri("citPOINT-MessageApp-Data-Web-SessionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SessionService service URI.</param>
        public SessionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISessionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SessionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SessionContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SessionService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISessionServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/GetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/GetSessionValue", ReplyAction="http://tempuri.org/SessionService/GetSessionValueResponse")]
            IAsyncResult BeginGetSessionValue(string[] sessionKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessionValue'.</param>
            /// <returns>The 'String' returned from the 'GetSessionValue' operation.</returns>
            string EndGetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SetSessionValue", ReplyAction="http://tempuri.org/SessionService/SetSessionValueResponse")]
            IAsyncResult BeginSetSessionValue(string[] sessionKey, string[] sessionValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionValue'.</param>
            void EndSetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SubmitChanges", ReplyAction="http://tempuri.org/SessionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SessionContextEntityContainer : EntityContainer
        {
            
            public SessionContextEntityContainer()
            {
            }
        }
    }
}
